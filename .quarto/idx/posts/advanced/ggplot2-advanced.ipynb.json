{"title":"advanced ggplot","markdown":{"yaml":{"title":"advanced ggplot","author":"Harlow Malloc","date":"2023-02-15","categories":["news","code","analysis"],"toc":true},"headingText":"collective geoms","containsRefs":false,"markdown":"\n\n\nGeoms can be roughly divided into individual and collective geoms. \n\n#### different groups on different layers\n\nwe want to plot summaries that use different levels of **aggregation**.\n\n#### matching aesthetics to graphic objects\n\n- lines and paths operate on the first value principle: each segment is defined by two observations\n- ggplot2 applies the aesthetic value associated with the first observation when drawing the segment.\n\n在左手边的颜色是离散的，右手边是连续的，即使颜色变量是连续的，`ggplot`不会平滑\n\n`group=\"whatever\"` 是一个\"虚拟\"分组来覆盖默认行为，(这里)是按 `cut` 分组，通常是按x 变量.`geom_bar `的默认值是按 `x` 变量分组，以便分别计算 `x` 变量的每个级别中的行数.例如，在这里，`geom_bar `默认返回` cut` 等于`\"Fair\"`、`\"Good\"`等的行数.\n\n但是，如果我们想要比例，那么我们需要将所有级别的` cut `一起考虑.在第二个图中，数据首先按` cut `分组，因此分别考虑 `cut `的每个级别.`Fair in Fair` 的比例是 100%，`Good in Good` 等的比例也是如此.`group=1`(或 `group=\"x\"` 等)阻止了这一点，因此每个级别的削减比例将**相对于**所有削减水平.\n\n\n\n若我们要进行混合渐变形式，\n\n显示多种颜色，需要多种的bars对于每一个`class`\n\n### statistical summaries\n\nA layer combines data, aesthetic mapping, a geom (geometric object), a stat (statistical transformation), and a position adjustment. Typically, you will create layers using a geom_ function, overriding the default position and stat if needed.\n\n\n#### revealing uncertainty\n\nhaving the infomation about the uncertainty present in your idea\n\n- discrete x,range:`geom_errorbar()`,`geom)linerange()`\n- discrete x,range&center:`geom_crossbar()`,`geom_pointrange()`\n- continuous x,range:`geom_ribbon()`\n- continuous x,range&center:`geom_smooth(stat=\"identity\")`\n\n##### 箱线图\n\n#### weighted data\n\n#### dealing with overplotting\n\nconstructing a bi-gauss distribution\n\n##### adjust the opacity\n\n- Estimate the 2d density with `stat_density2d()`\n\n\n#### Statistical summaries\n\n#### surfaces \n\nwe are considered two classes of geoms:\n- simple geoms where there's a one-on-one correspondence between rows in the data\n- statistical geoms where introduce a layer of statistical \nsummaries in between the raw data and the fault\n- we will consider cases where a visualization of a three dimensional surface\n\n `..level..` 变量\n \n `..`意味着一个内部计算的变量\n\n演示相同的分布做一个热力图\n\n#### generated variables\n\na stat takes a data frame as input and returns a data frame as output, and so a stat can add new variables to the original dataset\n\n### Geoms\n\ngeometric objects or geoms for short,perform the actual rendering of the layer, controlling the type of plot that you create.\n\n- graphical primitives:\n    - `geom_blank()`：啥也没有\n    - `geom_point()`points\n    - `geom_path()`\n    - `geom_rect()` rectangles.\n    - `geom_ploygon()` filled polygons.\n    - `geom_text()`\n\n- One variable:\n    - discrete\n    - continuous\n- two variables:\n    - both continuous:\n        - `geom_point()`\n        - `geom_smooth()`\n\n\n\n- three variables:\n    - `geom_contour()`\n    - `geom_tile()`\n    - `geom_raster()`: fast version of `geom_tile()` for equal sized tiles\n\n### Stats\n\n统计变换，或统计转换数据，通常是用某种方式来总结它\n\n- `stat_bin()`\n- `stat_bin2d()`\n- `stat_bindot()`\n- `stat_binplot()`\n\nother stats can't be created with a `geom_` function\n\nthe way to use these functions. you can either add a `stat_()` function and override the default geom or add a `geom_()` function and override the default stat:\n\n#### generated variables\n\na stat takes a data frame as input and returns a data frame as output, and so a stat can add new variables to the original dataset. it is possible to map aesthetics to these new variables.\n example: `stat_bin` 用于构建`histogram` 产生一系列的变量：\n- `count`,the number of observation in each bin\n- `density` the density of observation in each bin\n- `x` the centre of the bin\n\nthe `after_stat()` must wrap the name, preventing the confusion in case the original dataset includes a variables with the same name as a generated variable\n\n### scale and guides\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"ggplot2-advanced.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.124","theme":"cosmo","title-block-banner":true,"title":"advanced ggplot","author":"Harlow Malloc","date":"2023-02-15","categories":["news","code","analysis"]},"extensions":{"book":{"multiFile":true}}}}}